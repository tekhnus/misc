#!/usr/bin/env python
import sys
import dataclasses
import sexpdata


@dataclasses.dataclass
class State:
    varz: list = dataclasses.field(default_factory=list)
    stak: list = dataclasses.field(default_factory=list)
    ip: int = 0


def is_true(tagged_value):
    return bool((tagged_value))


def check_is_routine_0(tagged_value):
    offset, varz_and_stack = tagged_value
    varz, stack = varz_and_stack
    return offset, (varz, stack)


def check_is_cons(val):
    return val[0], (val[1:])


def make_list_with_items(*args):
    return list(args)


def make_routine_0(ip, varz, stak):
    return make_list_with_items((ip), make_list_with_items((varz), (stak)))


def make_symbol(s):
    return sexpdata.Symbol(s)


def get_var(d, k, offset):
    k_, v = d[-1 - offset]
    if k_ != k:
        exit("get_var: offset didn't match")
    return v


def head(args):
    a1, ar = check_is_cons(args)
    h, t = check_is_cons(a1)
    return h


def tail(args):
    a1, ar = check_is_cons(args)
    h, t = check_is_cons(a1)
    return t


def is_constant(args):
    v, ar = check_is_cons(args)
    if isinstance(v, list):
        return make_list_with_items()
    if isinstance(v, sexpdata.Symbol) and str(v)[0] != ":":
        return make_list_with_items()
    return make_list_with_items(make_list_with_items())


def eq(args):
    a1, ar = check_is_cons(args)
    a2, arr = check_is_cons(ar)
    if a1 == a2:
        return make_list_with_items(make_list_with_items())
    return make_list_with_items()


def panic(args):
    a1, ar = check_is_cons(args)
    raise RuntimeError("Panic! {}".format(repr(a1)))


def annotate(args):
    val, ar = check_is_cons(args)
    if isinstance(val, list):
        r = ":list"
    elif isinstance(val, sexpdata.Symbol):
        r = ":symbol"
    elif isinstance(val, str):
        r = ":bytestring"
    elif isinstance(val, int):
        r = ":integer"
    else:
        raise RuntimeError("cannot annotate {}".format(repr(a1)))
    return make_list_with_items(make_symbol(r), val)


def add(args):
    a1, ar = check_is_cons(args)
    a2, arr = check_is_cons(ar)
    return a1 + a2


def cons(args):
    a1, ar = check_is_cons(args)
    a2, arr = check_is_cons(ar)
    if a1 == a2:
        return make_list_with_items(make_list_with_items())
    return make_list_with_items(a1, *a2)


def concat_bytestrings(args):
    x, ar = check_is_cons(args)
    y, arr = check_is_cons(ar)
    return x + y


def repre(args):
    a1, ar = check_is_cons(args)
    return repr(a1)


def main():
    bc = sys.stdin.read()
    prog = sexpdata.loads(bc)
    ip = 0
    pdata = [[State()]]

    def pop_stack():
        return pdata[-1][-1].stak.pop()

    while True:
        ip = pdata[-1][-1].ip
        ins = prog[ip]
        # print(ins)
        op, args = ins[0], ins[1:]
        if op == sexpdata.Symbol(":end"):
            if len(pdata) != 1 or len(pdata[0]) != 1:
                raise RuntimeError("program ended, but the call stack is not empty")
            break
        elif op == sexpdata.Symbol(":if"):
            if_true, if_false = args
            if is_true(pop_stack()):
                ip = if_true
            else:
                ip = if_false
        elif op == sexpdata.Symbol(":nop"):
            (nex,) = args
            ip = nex
        elif op == sexpdata.Symbol(":put-const"):
            value, nex = args
            pdata[-1][-1].stak.append(value)
            pdata[-1][-1].varz.append((sexpdata.Symbol(":anon"), value))
            ip = nex
        elif op == sexpdata.Symbol(":put-var"):
            value, offset, nex = args
            varval = get_var(pdata[-1][-1].varz, value, offset)
            pdata[-1][-1].stak.append(varval)
            pdata[-1][-1].varz.append((sexpdata.Symbol(":anon"), varval))
            ip = nex
        elif op == sexpdata.Symbol(":call"):
            hat, nex = args
            if hat:
                raise RuntimeError("routine-1 call is not supported yet")
            fnandargs = pop_stack()
            rout, args = check_is_cons(fnandargs)
            offset, (varz, stack) = check_is_routine_0(rout)
            rtvarz = list(varz)
            rtstack = list(stack)
            rtstack.append(args)
            pdata[-1][-1].ip = nex
            pdata[-1].append(
                State(varz=rtvarz, stak=rtstack, ip=0)
            )  # ip set after endif
            ip = offset
        elif op == sexpdata.Symbol(":host"):
            instruction, nex = args
            arg = pop_stack()
            if (
                isinstance(instruction, list)
                and len(instruction) == 2
                and instruction[0] == "eval"
            ):
                res = eval(instruction[1], globals(), {"x": arg})
                pdata[-1][-1].stak.append(res)
            else:
                raise RuntimeError(f"host not implemented: {instruction}")
            ip = nex
        elif op == sexpdata.Symbol(":collect"):
            cnt, nex = args
            form = []
            for _ in range(cnt):
                val = pop_stack()
                form = [val] + form
            pdata[-1][-1].stak.append((form))
            ip = nex
        elif op == sexpdata.Symbol(":uncollect"):
            (nex,) = args
            lis = pdata[-1][-1].stak.pop()
            if not isinstance(lis, list) or not lis:
                raise RuntimeError("uncollect expected a non-empty list")
            hd, *tl = lis
            pdata[-1][-1].stak.append(tl)
            pdata[-1][-1].stak.append(hd)
            ip = nex
        elif op == sexpdata.Symbol(":pop"):
            var, nex = args
            if var == sexpdata.Symbol(":void"):
                pop_stack()
            else:
                pdata[-1][-1].varz.append((var, pop_stack()))
            ip = nex
        elif op == sexpdata.Symbol(":set-closures"):
            pr, name, hat, nex = args
            if hat:
                raise RuntimeError("routine-1 set-closures is not supported yet")
            pvarz = list(pdata[-1][-1].varz)
            p = make_routine_0(pr, pvarz, [])
            pvarz.append((name, p))
            pdata[-1][-1].varz.append((name, p))
            ip = nex
        elif op == sexpdata.Symbol(":put-prog"):
            pr, capture, nex = args
            if capture == 0:
                p = make_routine_0(pr, [], [])
            elif capture == 1:
                pvarz = list(pdata[-1][-1].varz)
                p = make_routine_0(pr, pvarz, [])
            else:
                raise RuntimeError("put-prog capture=2 is not supported yet")
            pdata[-1][-1].stak.append(p)
            ip = nex
        elif op == sexpdata.Symbol(":return"):
            # print(op, *args)
            (hat,) = args
            if hat:
                raise RuntimeError("routine-1 return is not supported yet")
            rvalue = pop_stack()
            pdata[-1].pop()
            pdata[-1][-1].stak.append(rvalue)
            ip = pdata[-1][-1].ip
        elif op == sexpdata.Symbol(":yield"):
            hat, nex = args
            rvalue = pop_stack()

            contvarz = list(pdata[-1][-1].varz)
            contstack = list(pdata[-1][-1].stak)
            cont = make_routine_0(varz=contvarz, stak=contstack, ip=nex)

            pdata[-1].pop()
            pdata[-1][-1].stak.append(make_list_with_items(rvalue, cont))
            ip = pdata[-1][-1].ip
        else:
            raise RuntimeError(op)
        pdata[-1][-1].ip = ip


if __name__ == "__main__":
    main()
